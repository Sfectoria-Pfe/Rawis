// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://root:root@lms.zgifrdh.mongodb.net/eLearning"
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  nom          String
  prenom       String
  email        String         @unique
  password     String
  imgUrl       String         @default("https://static.thenounproject.com/png/363640-200.png")
  phone        String?
  role         Role
  confirmKey   String?
  //Relations 
  score        Score[]
  ReponseQ     ReponseQ[]
  Enseignement Enseignement[]
  ReponseExr   ReponseExr[]
  Inscrire     Inscrire[]
}

enum Role {
  Etudiant
  Enseignant
  Admin
}

model Score {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  score Int

  //clés secondaires 
  User       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  Chapitre   Chapitre @relation(fields: [chapitreId], references: [id])
  chapitreId String   @db.ObjectId
}

model Cours {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  imgUrl      String
  semestre    Semestre @default(Semestre1)

  //Relations 
  Chapitre     Chapitre[]
  Enseignement Enseignement[]
  Exercice     Exercice[]
  Inscrire     Inscrire[]
  Field        Field          @relation(fields: [fieldId], references: [id])
  fieldId      String         @db.ObjectId
}

enum Semestre {
  Semestre1
  Semestre2
}

model Chapitre {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  link        String
  //clés secondaires
  Cours       Cours  @relation(fields: [coursId], references: [id], onDelete: Cascade)
  coursId     String @db.ObjectId

  //Relations 
  Quiz  Quiz[]
  Score Score[]
}

model Quiz {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  question   String
  //clés secondaires
  Chapitre   Chapitre @relation(fields: [chapitreId], references: [id])
  chapitreId String   @db.ObjectId

  //Relations
  reponse ReponseQ[]
  PropQcm PropQcm[]
}

model ReponseQ {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  //clés secondaires
  User      User    @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
  PropQcm   PropQcm @relation(fields: [propQcmId], references: [id])
  propQcmId String  @db.ObjectId
  Quiz      Quiz    @relation(fields: [quizId], references: [id])
  quizId    String  @db.ObjectId
}

model PropQcm {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  proposition String
  status      Boolean @default(false)

  reponse ReponseQ[]
  //clés secondaires
  Quiz    Quiz       @relation(fields: [quizId], references: [id])
  quizId  String     @db.ObjectId
}

model Enseignement {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  //clés secondaires
  User    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  Cours   Cours  @relation(fields: [coursId], references: [id], onDelete: Cascade)
  coursId String @db.ObjectId
}

model Inscrire {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  status  Status @default(Pending)
  User    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  Cours   Cours  @relation(fields: [coursId], references: [id])
  coursId String @db.ObjectId
}

enum Status {
  Pending
  confirmed
  Canceled
}

model ReponseExr {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  //clés secondaires
  User       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  Exercice   Exercice @relation(fields: [exerciceId], references: [id])
  exerciceId String   @db.ObjectId
}

model Exercice {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  question String

  //Relations
  ReponseExr ReponseExr[]

  Cours   Cours  @relation(fields: [coursId], references: [id])
  coursId String @db.ObjectId
}

model Contact {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  email       String
  sujet       String
  description String
}

model Field {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title       String
  imgUrl      String
  description String
  Cours       Cours[]
}
